from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium_stealth import stealth
import pandas as pd
import time
import re
import random
import os


def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞"""
    options = Options()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--disable-extensions')
    options.add_argument('--start-maximized')
    options.add_argument(
        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    driver = webdriver.Chrome(options=options)

    stealth(driver,
            languages=["ru-RU", "ru"],
            vendor="Google Inc.",
            platform="Win32",
            webgl_vendor="Intel Inc.",
            renderer="Intel Iris OpenGL Engine",
            fix_hairline=True,
            )

    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: function() {return undefined;}})")

    return driver


def human_like_delay(min_seconds=1, max_seconds=3):
    time.sleep(random.uniform(min_seconds, max_seconds))


def wait_for_page_load(driver, timeout=10):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    WebDriverWait(driver, timeout).until(
        lambda driver: driver.execute_script('return document.readyState') == 'complete'
    )


def scroll_all(driver, max_scrolls=20, scroll_delay_min=2, scroll_delay_max=4):
    """
    –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∫–æ–Ω—Ü–∞ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    """
    print("üìú –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    last_height = driver.execute_script("return document.body.scrollHeight")
    scroll_attempts = 0
    no_new_content_count = 0
    max_no_new_content = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    all_products_count = 0
    products_data = []

    while scroll_attempts < max_scrolls and no_new_content_count < max_no_new_content:
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        scroll_height = random.randint(800, 1200)
        driver.execute_script(f"window.scrollBy(0, {scroll_height});")

        human_like_delay(scroll_delay_min, scroll_delay_max)
        scroll_attempts += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        new_height = driver.execute_script("return document.body.scrollHeight")

        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        current_products = find_kitchen_gas_stoves(driver)
        current_count = len(current_products)

        print(f"üìä –ü–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ {scroll_attempts}: –Ω–∞–π–¥–µ–Ω–æ {current_count} —Ç–æ–≤–∞—Ä–æ–≤")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if current_products:
            new_data = extract_products_data(driver, current_products, all_products_count)
            if new_data:
                products_data.extend(new_data)
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                save_temp_data(products_data, 'temp_ozon_data.xlsx')
                print(f"üíæ –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(new_data)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if new_height == last_height:
            no_new_content_count += 1
            print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({no_new_content_count}/{max_no_new_content})")
        else:
            no_new_content_count = 0
            last_height = new_height

        # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏
        human_like_delay(1, 2)

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        try:
            load_more_buttons = [
                "button[class*='load-more']",
                "button[class*='more']",
                "div[class*='load-more']",
                "a[class*='next']",
                "button:contains('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')",
                "button:contains('–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ')"
            ]

            for selector in load_more_buttons:
                try:
                    button = driver.find_element(By.CSS_SELECTOR, selector)
                    if button.is_displayed():
                        driver.execute_script("arguments[0].click();", button)
                        print("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'")
                        human_like_delay(3, 5)
                        break
                except:
                    continue
        except:
            pass

    print(f"‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: {scroll_attempts}")
    return products_data


def extract_products_data(driver, products, existing_count=0):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    products_data = []

    for i, product in enumerate(products, existing_count + 1):
        try:
            print(f"\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {i} ---")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–æ–≤–∞—Ä—É
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", product)
            human_like_delay(1, 2)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            name = extract_product_name(product)
            price = extract_accurate_price(product, driver)

            print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name[:100] if name else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            print(f"üí∞ –¶–µ–Ω–∞: {price if price else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")

            if name and price:
                # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ì–ê–ó–û–í–ê–Ø –∫—É—Ö–æ–Ω–Ω–∞—è –ø–ª–∏—Ç–∞
                name_lower = name.lower()
                is_gas_kitchen_stove = (
                        any(word in name_lower for word in ['–≥–∞–∑–æ–≤', '–≥–∞–∑–æ–≤–∞—è', '–≥–∞–∑–æ–≤–æ–π']) and
                        any(word in name_lower for word in ['–ø–ª–∏—Ç–∞', '–≤–∞—Ä–æ—á–Ω–∞—è', '–¥—É—Ö–æ–≤–∫–∞']) and
                        not any(word in name_lower for word in [
                            '—ç–ª–µ–∫—Ç—Ä–∏—á', '–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω', '—ç–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞',
                            '–∏–Ω–¥—É–∫—Ü–∏–æ–Ω', '–≥–∞–∑–æ—ç–ª–µ–∫—Ç—Ä–∏—á', '–ø–æ—Ö–æ–¥–Ω', '—Ç—É—Ä–∏—Å—Ç–∏—á'
                        ])
                )

                if is_gas_kitchen_stove:
                    product_data = {
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞': '–ö—É—Ö–æ–Ω–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞',
                        '–ú–æ–¥–µ–ª—å': name,
                        '–¶–µ–Ω–∞': price,
                        '–ò—Å—Ç–æ—á–Ω–∏–∫': 'Ozon',
                        '–í—Ä–µ–º—è —Å–±–æ—Ä–∞': time.strftime('%Y-%m-%d %H:%M:%S')
                    }
                    products_data.append(product_data)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ì–ê–ó–û–í–ê–Ø –ø–ª–∏—Ç–∞: {name[:80]}... - {price} —Ä—É–±.")
                else:
                    print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ –≥–∞–∑–æ–≤–∞—è): {name[:60]}...")
            else:
                print(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
            continue

    return products_data


def save_temp_data(data, filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if data:
        try:
            df = pd.DataFrame(data)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            df.to_excel(filename, index=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")


def find_kitchen_gas_stoves(driver):
    """–ü–æ–∏—Å–∫ –∏–º–µ–Ω–Ω–æ –∫—É—Ö–æ–Ω–Ω—ã—Ö –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    print("üîç –ò—â–µ–º –∫—É—Ö–æ–Ω–Ω—ã–µ –≥–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã...")

    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    try:
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, "div[class*='tile'], article[class*='tile'], div[class*='card']"))
        )
    except:
        print("‚è≥ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...")

    # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Ozon
    selectors = [
        "div[class*='tile-root']",
        "article[class*='tile-root']",
        "div[class*='widget-search-result'] div[class*='tile']",
        "div[class*='search-result'] div[class*='tile']",
        "div[class*='tile']",
        "article[class*='tile']",
        "div[class*='card']",
        "div[class*='item']"
    ]

    products = []

    for selector in selectors:
        try:
            elements = driver.find_elements(By.CSS_SELECTOR, selector)
            if elements:
                print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {len(elements)}")

            for element in elements:
                try:
                    text = element.text.lower()
                    if len(text) > 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
                        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫—É—Ö–æ–Ω–Ω–æ–π –ì–ê–ó–û–í–û–ô –ø–ª–∏—Ç—ã
                        is_gas_stove = (
                                any(word in text for word in ['–ø–ª–∏—Ç–∞', '–≥–∞–∑–æ–≤', '–≥–∞–∑–æ–≤–∞—è', '–≥–∞–∑–æ–≤–æ–π']) and
                                not any(word in text for word in [
                                    '–ø–æ—Ö–æ–¥–Ω', '—Ç—É—Ä–∏—Å—Ç–∏—á', '–∫–µ–º–ø–∏–Ω–≥', '–∫–µ–π—Å', '–ø–µ—Ä–µ–Ω–æ—Å–Ω', '–ø–æ—Ä—Ç–∞—Ç–∏–≤',
                                    '—ç–ª–µ–∫—Ç—Ä–∏—á', '–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω', '—ç–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞', '–∏–Ω–¥—É–∫—Ü–∏–æ–Ω', '–≥–∞–∑–æ—ç–ª–µ–∫—Ç—Ä–∏—á'
                                ])
                        )

                        if is_gas_stove:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                            element_id = element.id
                            if not any(p.id == element_id for p in products):
                                products.append(element)
                                print(f"–ù–∞–π–¥–µ–Ω–∞ –≥–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞: {text[:100]}...")
                except:
                    continue

            if products:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç: {len(products)}")
                break

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
            continue

    return products


def extract_accurate_price(element, driver):
    """–¢–æ—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –¥–ª—è Ozon"""
    try:
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—â–µ–º —Ü–µ–Ω—É –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∫–ª–∞—Å—Å–æ–≤ Ozon
        price_selectors = [
            "span[class*='price']",
            "div[class*='price']",
            "span[class*='cost']",
            "div[class*='cost']",
            "[class*='currency']",
            "span[class*='rub']",
            "div[class*='rub']",
            "b[class*='price']",
            "strong[class*='price']",
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã Ozon
            ".c311-a1", ".a0c1", ".a1v9", ".a1v7", ".ui-q", ".q5",
            ".tsHeadline500Large", ".tsBodyControl400Large",
            "[data-widget*='price']",
            "[data-testid*='price']",
            "[class*='tile-price']",
            # –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Ozon
            "span[class*='tsHeadline']",
            "div[class*='tsHeadline']",
            "span[class*='tsBodyControl400Large']",
            "div[class*='tsBodyControl400Large']"
        ]

        for selector in price_selectors:
            try:
                price_elements = element.find_elements(By.CSS_SELECTOR, selector)
                for price_element in price_elements:
                    price_text = price_element.text.strip()
                    if price_text:
                        print(f"–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã: {price_text}")
                        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                        clean_text = re.sub(r'[^\d\s]', '', price_text)
                        clean_text = re.sub(r'\s+', '', clean_text)

                        if clean_text and len(clean_text) >= 3:
                            price = int(clean_text)
                            if 1000 <= price <= 500000:  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                print(f"–¶–µ–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞: {price}")
                                return price
            except:
                continue

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —É–∑–ª–∞–º —Å –ø–æ–º–æ—â—å—é JavaScript
        js_script = """
        var element = arguments[0];
        var walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null, false);
        var textNodes = [];
        while (walker.nextNode()) {
            textNodes.push(walker.currentNode.textContent);
        }

        var priceRegex = /\\d{1,3}[\\s‚ÄØ]?\\d{3}[\\s‚ÄØ]?\\d{0,3}/g;
        for (var i = 0; i < textNodes.length; i++) {
            var matches = textNodes[i].match(priceRegex);
            if (matches) {
                for (var j = 0; j < matches.length; j++) {
                    var cleanPrice = matches[j].replace(/[^\\d]/g, '');
                    if (cleanPrice.length >= 3) {
                        var price = parseInt(cleanPrice);
                        if (price >= 1000 && price <= 500000) {
                            return price;
                        }
                    }
                }
            }
        }
        return null;
        """

        price = driver.execute_script(js_script, element)
        if price:
            print(f"–¶–µ–Ω–∞ –∏–∑ JavaScript: {price}")
            return price

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        element_text = element.text
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ü–µ–Ω
        price_patterns = [
            r'(\d{1,3}[ \‚ÄØ]?\d{3}[ \‚ÄØ]?\d{0,3})[ \‚ÄØ]?‚ÇΩ?',
            r'‚ÇΩ[ \‚ÄØ]*(\d{1,3}[ \‚ÄØ]?\d{3}[ \‚ÄØ]?\d{0,3})',
            r'—Ä—É–±[^\\d]*(\d{1,3}[ \‚ÄØ]?\d{3}[ \‚ÄØ]?\d{0,3})'
        ]

        for pattern in price_patterns:
            price_matches = re.findall(pattern, element_text)
            for match in price_matches:
                clean_price = re.sub(r'[^\d]', '', str(match))
                if clean_price:
                    price = int(clean_price)
                    if 1000 <= price <= 500000:
                        print(f"–¶–µ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {price}")
                        return price

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö data-*
        try:
            data_attributes = element.get_attribute('outerHTML')
            if data_attributes:
                data_price_matches = re.findall(r'data-price="(\d+)"', data_attributes)
                for match in data_price_matches:
                    price = int(match)
                    if 1000 <= price <= 500000:
                        print(f"–¶–µ–Ω–∞ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞: {price}")
                        return price
        except:
            pass

        print("–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None


def extract_product_name(element):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        title_selectors = [
            "a[class*='title']",
            "span[class*='title']",
            "div[class*='title']",
            "h3", "h4", "h5",
            "a[class*='name']",
            "span[class*='name']",
            "div[class*='name']",
            "[class*='tile-title']",
            "[class*='card-title']",
            ".tsBody500Medium", ".a5-a"
        ]

        for selector in title_selectors:
            try:
                title_elements = element.find_elements(By.CSS_SELECTOR, selector)
                for title_element in title_elements:
                    title_text = title_element.text.strip()
                    if title_text and len(title_text) > 10:
                        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {title_text[:80]}...")
                        return title_text
            except:
                continue

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
        text = element.text
        lines = [line.strip() for line in text.split('\n') if line.strip()]

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
        if lines:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            filtered_lines = []
            for line in lines:
                if (len(line) > 15 and
                        not re.search(r'\d{1,3}[ \‚ÄØ]?\d{3}[ \‚ÄØ]?\d{0,3}[ \‚ÄØ]?‚ÇΩ', line) and
                        not re.search(r'–æ—Ç–∑—ã–≤|–≤ –∫–æ—Ä–∑–∏–Ω—É|–∫—É–ø–∏—Ç—å|‚ÇΩ|—Ä—É–±|–¥–æ—Å—Ç–∞–≤–∫–∞', line.lower())):
                    filtered_lines.append(line)

            if filtered_lines:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                name = max(filtered_lines, key=len)
                print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {name[:80]}...")
                return name

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            for line in lines:
                if len(line) > 20:
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {line[:80]}...")
                    return line

            name = lines[0] if lines else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {name[:80]}...")
            return name

        print("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"


def parse_ozon_kitchen_gas_stoves():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω–Ω–æ –∫—É—Ö–æ–Ω–Ω—ã—Ö –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç"""
    driver = setup_driver()
    all_data = []

    try:
        # –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π URL –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç
        url = "https://www.ozon.ru/search/?text=–≥–∞–∑–æ–≤–∞—è+–ø–ª–∏—Ç–∞+–∫—É—Ö–æ–Ω–Ω–∞—è&from_global=true"

        print(f"\nüåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL: {url}")
        driver.get(url)
        wait_for_page_load(driver)
        human_like_delay(5, 8)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        all_data = scroll_all(driver, max_scrolls=15, scroll_delay_min=2, scroll_delay_max=4)

        print(f"\nüìä –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_data)} –ì–ê–ó–û–í–´–• –ø–ª–∏—Ç")

    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        driver.save_screenshot('ozon_error.png')
    finally:
        driver.quit()

    return all_data


def remove_duplicates(df):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ DataFrame"""
    if df is None or df.empty:
        return df

    print(f"üìä –î–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df)} –∑–∞–ø–∏—Å–µ–π")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame –¥–ª—è —Ä–∞–±–æ—Ç—ã
    df_clean = df.copy()

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª–∏ –∏ —Ü–µ–Ω–µ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
    df_clean = df_clean.drop_duplicates(subset=['–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞'], keep='first')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ –º–æ–¥–µ–ª–∏
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    df_clean['–ú–æ–¥–µ–ª—å_–Ω–æ—Ä–º'] = df_clean['–ú–æ–¥–µ–ª—å'].str.lower().str.replace(r'[^\w\s]', '', regex=True)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ —Ü–µ–Ω–µ
    df_clean = df_clean.drop_duplicates(subset=['–ú–æ–¥–µ–ª—å_–Ω–æ—Ä–º', '–¶–µ–Ω–∞'], keep='first')

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    df_clean = df_clean.drop('–ú–æ–¥–µ–ª—å_–Ω–æ—Ä–º', axis=1)

    print(f"üìä –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df_clean)} –∑–∞–ø–∏—Å–µ–π")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df) - len(df_clean)}")

    return df_clean


def save_to_excel(data, filename='ozon_kitchen_gas_stoves_with_del_dublicates.xlsx'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    if data:
        df = pd.DataFrame(data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏)
        all_filename = 'ozon_kitchen_gas_stoves_with_duplicates.xlsx'
        df_all = df.copy()
        df_all = df_all.sort_values('–¶–µ–Ω–∞', ascending=True)
        df_all.reset_index(drop=True, inplace=True)
        df_all.index = df_all.index + 1
        df_all['–¶–µ–Ω–∞'] = df_all['–¶–µ–Ω–∞'].apply(lambda x: f"{x:,} —Ä—É–±.".replace(',', ' '))
        df_all.to_excel(all_filename, index=True, index_label='‚Ññ')
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏): {len(df_all)} —à—Ç. –≤ —Ñ–∞–π–ª {all_filename}")

        # –£–î–ê–õ–Ø–ï–ú –î–£–ë–õ–ò–ö–ê–¢–´ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        df_clean = remove_duplicates(df)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        df_clean = df_clean.sort_values('–¶–µ–Ω–∞', ascending=True)
        df_clean.reset_index(drop=True, inplace=True)
        df_clean.index = df_clean.index + 1

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        df_clean['–¶–µ–Ω–∞'] = df_clean['–¶–µ–Ω–∞'].apply(lambda x: f"{x:,} —Ä—É–±.".replace(',', ' '))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        df_clean.to_excel(filename, index=True, index_label='‚Ññ')
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df_clean)} –∫—É—Ö–æ–Ω–Ω—ã—Ö –ø–ª–∏—Ç (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤) –≤ —Ñ–∞–π–ª {filename}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists('temp_ozon_data.xlsx'):
            os.remove('temp_ozon_data.xlsx')
            print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        print("\nüèÜ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫—É—Ö–æ–Ω–Ω—ã–µ –≥–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã —Å Ozon (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤):")
        print("-" * 100)
        for i, row in df_clean.iterrows():
            print(f"{i:2d}. {row['–ú–æ–¥–µ–ª—å'][:70]}... - {row['–¶–µ–Ω–∞']}")
        print("-" * 100)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—á–∏—â–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        prices_clean = []
        for price_str in df_clean['–¶–µ–Ω–∞']:
            try:
                price_num = int(price_str.replace(' —Ä—É–±.', '').replace(' ', ''))
                prices_clean.append(price_num)
            except:
                continue

        if prices_clean:
            avg_price = sum(prices_clean) // len(prices_clean)
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤):")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∏—Ç: {len(prices_clean)}")
            print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min(prices_clean):,} —Ä—É–±.")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max(prices_clean):,} —Ä—É–±.")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,} —Ä—É–±.")

        return df_clean
    else:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫—É—Ö–æ–Ω–Ω—ã—Ö –ì–ê–ó–û–í–´–• –ø–ª–∏—Ç —Å Ozon...")
    print("‚è≥ –ò—â–µ–º –∏–º–µ–Ω–Ω–æ –ì–ê–ó–û–í–´–ï –º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)...")
    print("=" * 80)

    start_time = time.time()

    kitchen_stoves_data = parse_ozon_kitchen_gas_stoves()

    end_time = time.time()
    execution_time = end_time - start_time

    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ì–ê–ó–û–í–´–• –ø–ª–∏—Ç: {len(kitchen_stoves_data)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ–ø–µ—Ä—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    result_df = save_to_excel(kitchen_stoves_data)

    if not kitchen_stoves_data:
        print("\n‚ùå –ì–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ Ozon")
        print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∫–æ–¥–µ –ø–æ–¥ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞")
        print("4. –£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç-—Ñ—É–Ω–∫—Ü–∏–π")