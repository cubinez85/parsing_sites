from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium_stealth import stealth
import pandas as pd
import time
import re
import random
import os
import json
from datetime import datetime


def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è Wildberries"""
    options = Options()

    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--disable-extensions')
    options.add_argument('--start-maximized')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-popup-blocking')
    options.add_argument('--disable-notifications')

    # User-agent –¥–ª—è Wildberries
    options.add_argument(
        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    options.add_argument('--accept-lang=ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7')

    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    driver = webdriver.Chrome(options=options)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth —Ä–µ–∂–∏–º
    stealth(driver,
            languages=["ru-RU", "ru"],
            vendor="Google Inc.",
            platform="Win32",
            webgl_vendor="Intel Inc.",
            renderer="Intel Iris OpenGL Engine",
            fix_hairline=True,
            )

    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: function() {return undefined;}})")

    return driver


def human_like_delay(min_seconds=1, max_seconds=3):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    time.sleep(random.uniform(min_seconds, max_seconds))


def wait_for_page_load(driver, timeout=10):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    WebDriverWait(driver, timeout).until(
        lambda driver: driver.execute_script('return document.readyState') == 'complete'
    )


def close_wildberries_popups(driver):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω –Ω–∞ Wildberries"""
    try:
        time.sleep(2)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏
        try:
            cookie_btn = driver.find_element(By.CSS_SELECTOR,
                                             '.cookie-notification__button, .cookies__button, [data-wba-header-name*="Cookie"]')
            if cookie_btn.is_displayed():
                cookie_btn.click()
                time.sleep(1)
        except:
            pass

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        try:
            geo_btn = driver.find_element(By.CSS_SELECTOR,
                                          '.geo__close, .location__close, [data-wba-header-name*="Location"]')
            if geo_btn.is_displayed():
                geo_btn.click()
                time.sleep(1)
        except:
            pass

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ø–∞–ø—ã
        close_selectors = [
            'button[aria-label*="–ó–∞–∫—Ä—ã—Ç—å"]',
            '.popup__close',
            '.j-close',
            '.modal__close'
        ]

        for selector in close_selectors:
            try:
                close_btns = driver.find_elements(By.CSS_SELECTOR, selector)
                for btn in close_btns:
                    if btn.is_displayed():
                        btn.click()
                        time.sleep(0.5)
            except:
                pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–æ–≤: {e}")


def save_to_temp_file(data, filename='temp_wildberries_gas_stoves.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        existing_data = []
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)

        existing_data.extend(data)

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª. –í—Å–µ–≥–æ: {len(existing_data)}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        return False


def load_from_temp_file(filename='temp_wildberries_gas_stoves.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return []


def clear_temp_file(filename='temp_wildberries_gas_stoves.json'):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        if os.path.exists(filename):
            os.remove(filename)
            print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


def scroll_wildberries_page(driver, max_scrolls=10):
    """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Wildberries —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üìú –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã Wildberries...")

    last_height = driver.execute_script("return document.body.scrollHeight")
    scroll_attempts = 0
    no_new_content_count = 0
    max_no_new_content = 3

    all_products_data = []
    temp_filename = 'temp_wildberries_gas_stoves.json'

    while scroll_attempts < max_scrolls and no_new_content_count < max_no_new_content:
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        scroll_height = random.randint(800, 1200)
        driver.execute_script(f"window.scrollBy(0, {scroll_height});")

        human_like_delay(2, 4)
        scroll_attempts += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        new_height = driver.execute_script("return document.body.scrollHeight")

        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        current_products = find_wildberries_products(driver)
        current_count = len(current_products)

        print(f"üìä –ü–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ {scroll_attempts}: –Ω–∞–π–¥–µ–Ω–æ {current_count} —Ç–æ–≤–∞—Ä–æ–≤")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if current_products:
            new_data = extract_wildberries_products_data(driver, current_products, len(all_products_data))
            if new_data:
                all_products_data.extend(new_data)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                save_to_temp_file(new_data, temp_filename)
                print(f"üíæ –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(new_data)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if new_height == last_height:
            no_new_content_count += 1
            print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({no_new_content_count}/{max_no_new_content})")
        else:
            no_new_content_count = 0
            last_height = new_height

        # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞
        human_like_delay(1, 2)

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        try:
            load_more_selectors = [
                "button[class*='show-more']",
                "button[class*='load-more']",
                ".j-show-more",
                ".show-more__btn"
            ]

            for selector in load_more_selectors:
                try:
                    button = driver.find_element(By.CSS_SELECTOR, selector)
                    if button.is_displayed():
                        driver.execute_script("arguments[0].click();", button)
                        print("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'")
                        human_like_delay(3, 5)
                        break
                except:
                    continue
        except:
            pass

    print(f"‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: {scroll_attempts}")
    return all_products_data


def find_wildberries_products(driver):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries"""
    print("üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")

    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".product-card, .card, [data-card-index]"))
        )
    except:
        print("‚è≥ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...")

    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ Wildberries
    product_selectors = [
        "article.product-card",
        "div.product-card",
        ".card__link",
        "[data-card-index]",
        ".j-card-item",
        ".product-card__wrapper"
    ]

    products = []

    for selector in product_selectors:
        try:
            elements = driver.find_elements(By.CSS_SELECTOR, selector)
            if elements:
                print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {len(elements)}")

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã
                for element in elements:
                    try:
                        text = element.text.lower()
                        if len(text) > 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞
                            is_gas_stove = (
                                    any(word in text for word in ['–ø–ª–∏—Ç–∞', '–≥–∞–∑–æ–≤', '–≥–∞–∑–æ–≤–∞—è', '–≥–∞–∑–æ–≤–æ–π']) and
                                    not any(word in text for word in [
                                        '—ç–ª–µ–∫—Ç—Ä–∏—á', '–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω', '—ç–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞',
                                        '–∏–Ω–¥—É–∫—Ü–∏–æ–Ω', '–≥–∞–∑–æ—ç–ª–µ–∫—Ç—Ä–∏—á', '–ø–æ—Ö–æ–¥–Ω', '—Ç—É—Ä–∏—Å—Ç–∏—á'
                                    ])
                            )

                            if is_gas_stove:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
                                element_id = element.get_attribute('data-card-index') or element.id
                                if not any(p.get_attribute('data-card-index') == element_id for p in products):
                                    products.append(element)
                                    print(f"–ù–∞–π–¥–µ–Ω–∞ –≥–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞: {text[:100]}...")
                    except:
                        continue

            if products:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç: {len(products)}")
                break

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
            continue

    return products


def extract_wildberries_products_data(driver, products, existing_count=0):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries"""
    products_data = []

    for i, product in enumerate(products, existing_count + 1):
        try:
            print(f"\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {i} ---")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–æ–≤–∞—Ä—É
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", product)
            human_like_delay(1, 2)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            name = extract_wildberries_product_name(product)
            price = extract_wildberries_price(product, driver)
            rating = extract_wildberries_rating(product, driver)
            reviews = extract_wildberries_reviews(product, driver)

            print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name[:100] if name else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            print(f"üí∞ –¶–µ–Ω–∞: {price if price else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
            print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating if rating else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
            print(f"üìä –û—Ç–∑—ã–≤—ã: {reviews if reviews else '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}")

            if name and price:
                product_data = {
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞': '–ì–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞',
                    '–ú–æ–¥–µ–ª—å': name,
                    '–¶–µ–Ω–∞': price,
                    '–†–µ–π—Ç–∏–Ω–≥': rating or 0,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤': reviews or 0,
                    '–ò—Å—Ç–æ—á–Ω–∏–∫': 'Wildberries',
                    '–í—Ä–µ–º—è —Å–±–æ—Ä–∞': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                products_data.append(product_data)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞: {name[:80]}... - {price} —Ä—É–±.")
            else:
                print(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
            continue

    return products_data


def extract_wildberries_product_name(element):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries"""
    try:
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        title_selectors = [
            ".product-card__name",
            ".card__name",
            ".goods-name",
            "[data-link*='text={goodsName}']",
            ".j-card-name",
            "span.good-name"
        ]

        for selector in title_selectors:
            try:
                title_elements = element.find_elements(By.CSS_SELECTOR, selector)
                for title_element in title_elements:
                    title_text = title_element.text.strip()
                    if title_text and len(title_text) > 10:
                        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {title_text[:80]}...")
                        return title_text
            except:
                continue

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
        text = element.text
        lines = [line.strip() for line in text.split('\n') if line.strip()]

        if lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            filtered_lines = []
            for line in lines:
                if (len(line) > 15 and
                        not re.search(r'\d{1,3}[ \‚ÄØ]?\d{3}[ \‚ÄØ]?\d{0,3}[ \‚ÄØ]?‚ÇΩ', line) and
                        not re.search(r'–æ—Ç–∑—ã–≤|–≤ –∫–æ—Ä–∑–∏–Ω—É|–∫—É–ø–∏—Ç—å|‚ÇΩ|—Ä—É–±|–¥–æ—Å—Ç–∞–≤–∫–∞|—Ä–µ–π—Ç–∏–Ω–≥', line.lower())):
                    filtered_lines.append(line)

            if filtered_lines:
                name = max(filtered_lines, key=len)
                print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {name[:80]}...")
                return name

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            for line in lines:
                if len(line) > 20:
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {line[:80]}...")
                    return line

            name = lines[0] if lines else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {name[:80]}...")
            return name

        print("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"


def extract_wildberries_price(element, driver):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ Wildberries"""
    try:
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã Wildberries
        price_selectors = [
            ".price__lower-price",
            ".price-block__final-price",
            ".final-price",
            ".lower-price",
            ".j-final-price",
            "[class*='price__lower']",
            ".price-block__price"
        ]

        for selector in price_selectors:
            try:
                price_elements = element.find_elements(By.CSS_SELECTOR, selector)
                for price_element in price_elements:
                    price_text = price_element.text.strip()
                    if price_text:
                        print(f"–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã: {price_text}")
                        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                        clean_text = re.sub(r'[^\d\s]', '', price_text)
                        clean_text = re.sub(r'\s+', '', clean_text)

                        if clean_text and len(clean_text) >= 3:
                            price = int(clean_text)
                            if 1000 <= price <= 500000:
                                print(f"–¶–µ–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞: {price}")
                                return price
            except:
                continue

        # –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é JavaScript
        js_script = """
        var element = arguments[0];
        var text = element.textContent || element.innerText;
        var priceRegex = /\\d{1,3}[\\s‚ÄØ]?\\d{3}[\\s‚ÄØ]?\\d{0,3}/g;
        var matches = text.match(priceRegex);

        if (matches) {
            for (var i = 0; i < matches.length; i++) {
                var cleanPrice = matches[i].replace(/[^\\d]/g, '');
                if (cleanPrice.length >= 3) {
                    var price = parseInt(cleanPrice);
                    if (price >= 1000 && price <= 500000) {
                        return price;
                    }
                }
            }
        }
        return null;
        """

        price = driver.execute_script(js_script, element)
        if price:
            print(f"–¶–µ–Ω–∞ –∏–∑ JavaScript: {price}")
            return price

        print("–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None


def extract_wildberries_rating(element, driver):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        rating_selectors = [
            ".product-card__rating",
            ".j-rating",
            "[data-rating]",
            ".rating",
            ".stars"
        ]

        for selector in rating_selectors:
            try:
                rating_elements = element.find_elements(By.CSS_SELECTOR, selector)
                for rating_element in rating_elements:
                    rating_text = rating_element.text.strip()
                    if rating_text:
                        # –ò—â–µ–º —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                        rating_match = re.search(r'(\d+[.,]\d+|\d+)', rating_text)
                        if rating_match:
                            rating = float(rating_match.group(1).replace(',', '.'))
                            if 0 <= rating <= 5:
                                return rating
            except:
                continue

        return 0
    except:
        return 0


def extract_wildberries_reviews(element, driver):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        review_selectors = [
            ".product-card__count",
            ".j-feedback-count",
            "[data-review-count]",
            ".review-count"
        ]

        for selector in review_selectors:
            try:
                review_elements = element.find_elements(By.CSS_SELECTOR, selector)
                for review_element in review_elements:
                    review_text = review_element.text.strip()
                    if review_text:
                        # –ò—â–µ–º —á–∏—Å–ª–æ
                        review_match = re.search(r'(\d+)', review_text)
                        if review_match:
                            return int(review_match.group(1))
            except:
                continue

        return 0
    except:
        return 0


def parse_wildberries_gas_stoves():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç —Å Wildberries"""
    driver = setup_driver()
    temp_filename = 'temp_wildberries_gas_stoves.json'

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    clear_temp_file(temp_filename)

    all_data = []

    try:
        # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç –Ω–∞ Wildberries
        url = "https://www.wildberries.ru/catalog/bitovaya-tehnika/kuhnya/plity/plity-gazovye"

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        backup_url = "https://www.wildberries.ru/catalog/0/search.aspx?search=–≥–∞–∑–æ–≤–∞—è+–ø–ª–∏—Ç–∞"

        print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º Wildberries: {url}")
        driver.get(url)
        wait_for_page_load(driver)
        human_like_delay(5, 8)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã
        close_wildberries_popups(driver)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        page_title = driver.title.lower()
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {driver.title}")

        if "–≥–∞–∑–æ–≤" not in page_title and "–ø–ª–∏—Ç" not in page_title:
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL...")
            driver.get(backup_url)
            wait_for_page_load(driver)
            human_like_delay(5, 8)
            close_wildberries_popups(driver)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        all_data = scroll_wildberries_page(driver, max_scrolls=12)

        print(f"\nüìä –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_data)} –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç")

    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        driver.save_screenshot('wildberries_error.png')
    finally:
        driver.quit()

    return all_data


def remove_duplicates(df):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ DataFrame"""
    if df is None or df.empty:
        return df

    print(f"üìä –î–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df)} –∑–∞–ø–∏—Å–µ–π")

    df_clean = df.copy()

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª–∏ –∏ —Ü–µ–Ω–µ
    df_clean = df_clean.drop_duplicates(subset=['–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞'], keep='first')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    df_clean['–ú–æ–¥–µ–ª—å_–Ω–æ—Ä–º'] = df_clean['–ú–æ–¥–µ–ª—å'].str.lower().str.replace(r'[^\w\s]', '', regex=True)
    df_clean = df_clean.drop_duplicates(subset=['–ú–æ–¥–µ–ª—å_–Ω–æ—Ä–º', '–¶–µ–Ω–∞'], keep='first')
    df_clean = df_clean.drop('–ú–æ–¥–µ–ª—å_–Ω–æ—Ä–º', axis=1)

    print(f"üìä –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df_clean)} –∑–∞–ø–∏—Å–µ–π")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df) - len(df_clean)}")

    return df_clean


def save_to_excel(data, filename_base='wildberries_gas_stoves'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª—ã"""
    if not data:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None

    df = pd.DataFrame(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏)
    all_filename = f'{filename_base}_—Å_–¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏.xlsx'
    df_all = df.copy()
    df_all = df_all.sort_values('–¶–µ–Ω–∞', ascending=False)
    df_all.reset_index(drop=True, inplace=True)
    df_all.index = df_all.index + 1
    df_all['–¶–µ–Ω–∞'] = df_all['–¶–µ–Ω–∞'].apply(lambda x: f"{x:,} —Ä—É–±.".replace(',', ' '))
    df_all.to_excel(all_filename, index=True, index_label='‚Ññ')
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏): {len(df_all)} —à—Ç. –≤ —Ñ–∞–π–ª {all_filename}")

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    df_clean = remove_duplicates(df)
    df_clean = df_clean.sort_values('–¶–µ–Ω–∞', ascending=False)
    df_clean.reset_index(drop=True, inplace=True)
    df_clean.index = df_clean.index + 1
    df_clean['–¶–µ–Ω–∞'] = df_clean['–¶–µ–Ω–∞'].apply(lambda x: f"{x:,} —Ä—É–±.".replace(',', ' '))

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    main_filename = f'{filename_base}_–±–µ–∑_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤.xlsx'
    df_clean.to_excel(main_filename, index=True, index_label='‚Ññ')
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df_clean)} –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤) –≤ —Ñ–∞–π–ª {main_filename}")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists('temp_wildberries_gas_stoves.json'):
        os.remove('temp_wildberries_gas_stoves.json')
        print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüèÜ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –≥–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã —Å Wildberries (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤):")
    print("-" * 120)
    for i, row in df_clean.iterrows():
        rating_info = f"‚≠ê {row['–†–µ–π—Ç–∏–Ω–≥']}" if row['–†–µ–π—Ç–∏–Ω–≥'] > 0 else "‚≠ê 0"
        reviews_info = f"üìä {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤']} –æ—Ç–∑." if row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'] > 0 else "üìä 0 –æ—Ç–∑."
        print(f"{i:2d}. {row['–ú–æ–¥–µ–ª—å'][:60]}... - {row['–¶–µ–Ω–∞']} | {rating_info} | {reviews_info}")
    print("-" * 120)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    prices_clean = []
    for price_str in df_clean['–¶–µ–Ω–∞']:
        try:
            price_num = int(price_str.replace(' —Ä—É–±.', '').replace(' ', ''))
            prices_clean.append(price_num)
        except:
            continue

    if prices_clean:
        avg_price = sum(prices_clean) // len(prices_clean)
        total_reviews = df_clean['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'].sum()
        avg_rating = df_clean['–†–µ–π—Ç–∏–Ω–≥'].mean()

        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤):")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∏—Ç: {len(prices_clean)}")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min(prices_clean):,} —Ä—É–±.")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max(prices_clean):,} —Ä—É–±.")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,} —Ä—É–±.")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f} ‚≠ê")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews:,}")

    return df_clean


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç —Å Wildberries...")
    print("‚è≥ –ò—â–µ–º –∏–º–µ–Ω–Ω–æ –ì–ê–ó–û–í–´–ï –º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)...")
    print("=" * 80)

    start_time = time.time()

    gas_stoves_data = parse_wildberries_gas_stoves()

    end_time = time.time()
    execution_time = end_time - start_time

    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ì–ê–ó–û–í–´–• –ø–ª–∏—Ç: {len(gas_stoves_data)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result_df = save_to_excel(gas_stoves_data)

    if not gas_stoves_data:
        print("\n‚ùå –ì–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ Wildberries")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ Wildberries")
        print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∫–æ–¥–µ –ø–æ–¥ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞")
        print("4. –£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç-—Ñ—É–Ω–∫—Ü–∏–π")