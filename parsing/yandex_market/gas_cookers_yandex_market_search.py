from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium_stealth import stealth
import pandas as pd
import time
import re
import json
import os
from datetime import datetime


def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å stealth —Ä–µ–∂–∏–º–æ–º"""
    options = Options()

    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    options.add_argument('--start-maximized')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-extensions')
    options.add_argument('--disable-popup-blocking')
    options.add_argument('--disable-notifications')
    options.add_argument('--disable-infobars')

    # User-agent
    options.add_argument(
        'user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    options.add_argument('--accept-lang=ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7')

    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    driver = webdriver.Chrome(options=options)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth —Ä–µ–∂–∏–º
    stealth(driver,
            languages=["ru-RU", "ru"],
            vendor="Google Inc.",
            platform="Win32",
            webgl_vendor="Intel Inc.",
            renderer="Intel Iris OpenGL Engine",
            fix_hairline=True,
            )

    return driver


def close_popups(driver):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω –∏ –ø–æ–ø–∞–ø–æ–≤"""
    try:
        time.sleep(2)
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏
        try:
            cookie_btn = driver.find_element(By.CSS_SELECTOR,
                                             'button[data-grab-id*="cookie"], [data-id*="cookie"], [data-auto*="cookie"]')
            cookie_btn.click()
            time.sleep(1)
        except:
            pass

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ø–∞–ø—ã
        close_buttons = driver.find_elements(By.CSS_SELECTOR,
                                             'button[aria-label*="–ó–∞–∫—Ä—ã—Ç—å"], ._popup-close, .close-button, [data-zone-name*="close"]')
        for button in close_buttons:
            try:
                if button.is_displayed():
                    button.click()
                    time.sleep(0.5)
            except:
                pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–æ–≤: {e}")


def save_to_temp_file(data, filename='temp_gas_stoves.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        existing_data = []
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        existing_data.extend(data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(existing_data)}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        return False


def load_from_temp_file(filename='temp_gas_stoves.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return []


def clear_temp_file(filename='temp_gas_stoves.json'):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        if os.path.exists(filename):
            os.remove(filename)
            print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


def parse_gas_stoves():
    """–ü–∞—Ä—Å–∏–Ω–≥ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    driver = setup_driver()
    temp_filename = 'temp_gas_stoves.json'

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    clear_temp_file(temp_filename)

    try:
        # URL –ø–æ–∏—Å–∫–∞ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç
        url = "https://market.yandex.ru/search?text=–≥–∞–∑–æ–≤—ã–µ%20–ø–ª–∏—Ç—ã&hid=16147374&onstock=1"

        print("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç...")
        driver.get(url)
        time.sleep(5)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã
        close_popups(driver)
        time.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_title = driver.title.lower()
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {driver.title}")

        all_products_data = []

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        print("–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        for scroll_iteration in range(5):  # –£–≤–µ–ª–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
            print(f"\n--- –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {scroll_iteration + 1} ---")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            driver.execute_script(f"window.scrollTo(0, {2000 * (scroll_iteration + 1)});")
            time.sleep(3)

            # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(2)

            print("–ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏...")

            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            product_selectors = [
                'article',
                '[data-zone-name="snippet"]',
                '[data-autotest-id="product-snippet"]',
                '._2U08a',
                '.n-snippet-cell',
                '[data-zone-data*="snippet"]'
            ]

            products = []
            for selector in product_selectors:
                try:
                    found_products = driver.find_elements(By.CSS_SELECTOR, selector)
                    if found_products:
                        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º '{selector}': {len(found_products)}")
                        products = found_products
                        break
                except:
                    continue

            if not products:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
                all_elements = driver.find_elements(By.CSS_SELECTOR, 'div, article, section')
                products = [p for p in all_elements if p.get_attribute('data-zone-name') == 'snippet']
                if not products:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    continue

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ {scroll_iteration + 1}")

            current_scroll_data = []
            processed_models = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ

            for i, product in enumerate(products, 1):
                try:
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–æ–≤–∞—Ä—É
                    driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});",
                                          product)
                    time.sleep(0.5)

                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                    product_text = product.text
                    if not product_text or len(product_text) < 50:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

                    # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è
                    name = None
                    name_selectors = [
                        'h3',
                        'a[href*="/product/"]',
                        '[data-zone-name="title"]',
                        '.n-snippet-card2__title',
                        '._3EX9a',
                        '.N9L7oc'
                    ]

                    for selector in name_selectors:
                        try:
                            name_elem = product.find_element(By.CSS_SELECTOR, selector)
                            candidate_name = name_elem.text.strip()
                            if candidate_name and len(candidate_name) > 10:
                                name = candidate_name
                                break
                        except:
                            continue

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                    if not name and product_text:
                        lines = [line.strip() for line in product_text.split('\n') if line.strip()]
                        for line in lines:
                            if len(line) > 20 and any(word in line.lower() for word in
                                                      ['–ø–ª–∏—Ç–∞', '–≥–∞–∑–æ–≤', 'gorenje', 'bosch', 'electrolux', 'indesit',
                                                       'darina', '–≥–µ—Ñ–µ—Å—Ç', '–∞—Ä–∏—Å—Ç–æ–Ω', 'hotpoint']):
                                name = line
                                break

                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    if not name and product_text:
                        lines = [line.strip() for line in product_text.split('\n') if len(line.strip()) > 20]
                        if lines:
                            name = lines[0]

                    if not name:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ

                    # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
                    price = None
                    try:
                        # –ò—â–µ–º —Ü–µ–Ω—É —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
                        price_pattern = r'(\d{1,3}(?:\s?\d{3})*(?:\s?\d{3})*)\s*[‚ÇΩ—Ä—Ä—É–±]'
                        matches = re.findall(price_pattern, product_text, re.IGNORECASE)
                        if matches:
                            price = matches[0].replace(' ', '').replace('‚ÄÜ', '').replace('‚Äâ', '')
                        else:
                            # –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã
                            price_selectors = [
                                '[data-zone-name="price"]',
                                '.price',
                                '._1u3jP',
                                '.n-snippet-card2__price',
                                '.N9L7oc+div'
                            ]
                            for selector in price_selectors:
                                try:
                                    price_elem = product.find_element(By.CSS_SELECTOR, selector)
                                    price_text = price_elem.text
                                    price_match = re.search(price_pattern, price_text, re.IGNORECASE)
                                    if price_match:
                                        price = price_match.group(1).replace(' ', '').replace('‚ÄÜ', '').replace('‚Äâ', '')
                                        break
                                except:
                                    continue

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã: {e}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    if name and price:
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
                            price_num = int(price) if price.isdigit() else 0

                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            product_id = f"{name[:100]}_{price_num}"

                            if product_id not in processed_models:
                                product_data = {
                                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞': '–ì–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞',
                                    '–ú–æ–¥–µ–ª—å': name,
                                    '–¶–µ–Ω–∞': price_num,
                                    '–í—Ä–µ–º—è —Å–±–æ—Ä–∞': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                                    '–ü—Ä–æ–∫—Ä—É—Ç–∫–∞': scroll_iteration + 1
                                }

                                current_scroll_data.append(product_data)
                                processed_models.add(product_id)

                                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {name[:50]}... - {price_num} —Ä—É–±.")

                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: {e}")

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
                    continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if current_scroll_data:
                save_to_temp_file(current_scroll_data, temp_filename)
                all_products_data.extend(current_scroll_data)
                print(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(current_scroll_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ {scroll_iteration + 1}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        final_data = load_from_temp_file(temp_filename)
        return final_data

    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        driver.save_screenshot('error.png')
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        return load_from_temp_file(temp_filename)

    finally:
        driver.quit()


def save_to_excel(data, filename_base='yandex_market_gas_stoves'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –∏ –±–µ–∑"""
    if not data:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(data)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    df['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π_ID'] = df['–ú–æ–¥–µ–ª—å'].str[:100] + '_' + df['–¶–µ–Ω–∞'].astype(str)

    # –§–∞–π–ª –ë–ï–ó –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    df_no_duplicates = df.drop_duplicates(subset=['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π_ID'], keep='first')
    df_no_duplicates = df_no_duplicates.drop(columns=['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π_ID'])

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    df_no_duplicates = df_no_duplicates.sort_values('–¶–µ–Ω–∞', ascending=False)

    # –§–∞–π–ª –° –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    df_with_duplicates = df.drop(columns=['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π_ID'])
    df_with_duplicates = df_with_duplicates.sort_values(['–¶–µ–Ω–∞', '–í—Ä–µ–º—è —Å–±–æ—Ä–∞'], ascending=[False, True])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename_no_duplicates = f'{filename_base}_–±–µ–∑_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤_{timestamp}.xlsx'
    filename_with_duplicates = f'{filename_base}_—Å_–¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏_{timestamp}.xlsx'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df_no_duplicates.to_excel(filename_no_duplicates, index=False)
    df_with_duplicates.to_excel(filename_with_duplicates, index=False)

    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"   ‚Ä¢ –ë–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df_no_duplicates)} –∑–∞–ø–∏—Å–µ–π -> {filename_no_duplicates}")
    print(f"   ‚Ä¢ –° –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {len(df_with_duplicates)} –∑–∞–ø–∏—Å–µ–π -> {filename_with_duplicates}")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(df_no_duplicates)}")
    print(f"   ‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df) - len(df_no_duplicates)}")

    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 –ø–ª–∏—Ç
    print("\nüèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –ø–ª–∏—Ç:")
    for i, (_, row) in enumerate(df_no_duplicates.head().iterrows(), 1):
        print(f"{i}. {row['–ú–æ–¥–µ–ª—å'][:70]}... - {row['–¶–µ–Ω–∞']:,.0f} —Ä—É–±.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ CSV –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    df_no_duplicates.to_csv(f'{filename_base}_–±–µ–∑_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤_{timestamp}.csv', index=False, encoding='utf-8')
    print(f"üíæ –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ")


if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç...")
    print("üìù –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ")

    gas_stoves_data = parse_gas_stoves()

    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(gas_stoves_data)}")

    save_to_excel(gas_stoves_data)

    if gas_stoves_data:
        unique_count = len(pd.DataFrame(gas_stoves_data).drop_duplicates(subset=['–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞']))
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {unique_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–∞–∑–æ–≤—ã—Ö –ø–ª–∏—Ç")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")